name: üöÄ Deploy Mato Royale

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AZURE_RESOURCE_GROUP: SnakeDemo-RG
  AZURE_LOCATION: eastus
  PROJECT_NAME: mato-royale
  ENVIRONMENT: prod

jobs:
  test:
    name: üß™ Test & Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint code
        run: npm run lint
      
      - name: Run tests
        run: npm run test:unit
  
  build-engine:
    name: üèóÔ∏è Build Game Engine
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      
      - name: Build and push Docker image
        run: |
          cd engine
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/mato-royale-engine:${{ github.sha }} .
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/mato-royale-engine:latest .
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/mato-royale-engine:${{ github.sha }}
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/mato-royale-engine:latest

  build-client:
    name: üé® Build Client
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install and build client
        run: |
          cd client
          npm ci
          npm run build
      
      - name: Upload client build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: client-build
          path: client/dist/

  build-functions:
    name: ‚ö° Build Functions
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install and build functions
        run: |
          cd functions
          npm ci
          npm run build
      
      - name: Upload functions build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: functions-build
          path: functions/dist/

  deploy-infrastructure:
    name: üèóÔ∏è Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      acr-login-server: ${{ steps.deploy.outputs.containerRegistryLoginServer }}
      signalr-connection-string: ${{ steps.deploy.outputs.signalRConnectionString }}
      game-engine-url: ${{ steps.deploy.outputs.gameEngineUrl }}
      functions-app-url: ${{ steps.deploy.outputs.functionsAppUrl }}
      static-web-app-url: ${{ steps.deploy.outputs.staticWebAppUrl }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Deploy Bicep template
        id: deploy
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
          template: ./infra/main.bicep
          parameters: >
            projectName=${{ env.PROJECT_NAME }}
            environment=${{ env.ENVIRONMENT }}
            location=${{ env.AZURE_LOCATION }}

  deploy-engine:
    name: üéÆ Deploy Game Engine
    runs-on: ubuntu-latest
    needs: [build-engine, deploy-infrastructure]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Deploy to Container Apps
        run: |
          az containerapp update \
            --name ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-engine \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --image ${{ needs.deploy-infrastructure.outputs.acr-login-server }}/mato-royale-engine:${{ github.sha }} \
            --revision-suffix ${{ github.run_number }} \
            --traffic-weight latest=100

  deploy-functions:
    name: ‚ö° Deploy Functions
    runs-on: ubuntu-latest
    needs: [build-functions, deploy-infrastructure]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Download functions artifacts
        uses: actions/download-artifact@v4
        with:
          name: functions-build
          path: functions/dist/
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Deploy Azure Functions
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-functions
          package: functions/

  deploy-client:
    name: üé® Deploy Client
    runs-on: ubuntu-latest
    needs: [build-client, deploy-infrastructure]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Download client artifacts
        uses: actions/download-artifact@v4
        with:
          name: client-build
          path: client/dist/
      
      - name: Deploy to Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "client/dist"
          skip_app_build: true

  run-e2e-tests:
    name: üß™ E2E Tests
    runs-on: ubuntu-latest
    needs: [deploy-engine, deploy-client, deploy-functions]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install test dependencies
        run: |
          cd tests
          npm ci
      
      - name: Run E2E tests
        run: |
          cd tests
          npm run test:e2e
        env:
          GAME_URL: ${{ needs.deploy-infrastructure.outputs.static-web-app-url }}
          ENGINE_URL: ${{ needs.deploy-infrastructure.outputs.game-engine-url }}

  notify-deployment:
    name: üì¢ Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-engine, deploy-client, deploy-functions, run-e2e-tests]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Deployment Status
        run: |
          if [[ "${{ needs.run-e2e-tests.result }}" == "success" ]]; then
            echo "üéâ Deployment successful!"
            echo "üéÆ Game URL: ${{ needs.deploy-infrastructure.outputs.static-web-app-url }}"
            echo "üîß Engine URL: ${{ needs.deploy-infrastructure.outputs.game-engine-url }}"
            echo "‚ö° Functions URL: ${{ needs.deploy-infrastructure.outputs.functions-app-url }}"
          else
            echo "‚ùå Deployment failed or tests failed"
            exit 1
          fi
